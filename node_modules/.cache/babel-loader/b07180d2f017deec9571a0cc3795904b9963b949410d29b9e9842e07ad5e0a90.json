{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:4000';\nexport const fetchScrums = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/scrums`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scrums:', error);\n    return [];\n  }\n};\nexport const fetchUsers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/users`);\n    return response.data.filter(user => user.role === 'employee');\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return [];\n  }\n};\nexport const fetchScrumDetails = async scrumId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/scrums/${scrumId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scrum details:', error);\n    return null;\n  }\n};\nexport const createScrumWithTask = async values => {\n  try {\n    const scrumId = Date.now().toString();\n    const newScrumResponse = await axios.post(`${API_BASE_URL}/scrums`, {\n      id: scrumId,\n      name: values.scrumName\n    });\n    const taskId = (Date.now() + 1).toString();\n    await axios.post(`${API_BASE_URL}/tasks`, {\n      id: taskId,\n      title: values.taskTitle,\n      description: values.taskDescription,\n      status: values.taskStatus,\n      scrumId: Number(scrumId),\n      assignedTo: Number(values.taskAssignedTo),\n      history: [{\n        status: values.taskStatus,\n        date: new Date().toISOString().split('T')[0]\n      }]\n    });\n    return newScrumResponse.data;\n  } catch (error) {\n    console.error('Error creating scrum:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchScrums","response","get","data","error","console","fetchUsers","filter","user","role","fetchScrumDetails","scrumId","createScrumWithTask","values","Date","now","toString","newScrumResponse","post","id","name","scrumName","taskId","title","taskTitle","description","taskDescription","status","taskStatus","Number","assignedTo","taskAssignedTo","history","date","toISOString","split"],"sources":["C:/Users/Patni/Downloads/Final/React-Agile-Track-System-Solution-main-main/src/components/Service/Scrum Service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:4000';\r\n\r\nexport const fetchScrums = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/scrums`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching scrums:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const fetchUsers = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/users`);\r\n        return response.data.filter(user => user.role === 'employee');\r\n    } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const fetchScrumDetails = async (scrumId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/scrums/${scrumId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching scrum details:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const createScrumWithTask = async (values) => {\r\n    try {\r\n        const scrumId = Date.now().toString();\r\n        const newScrumResponse = await axios.post(`${API_BASE_URL}/scrums`, {\r\n            id: scrumId,\r\n            name: values.scrumName\r\n        });\r\n\r\n        const taskId = (Date.now() + 1).toString();\r\n        await axios.post(`${API_BASE_URL}/tasks`, {\r\n            id: taskId,\r\n            title: values.taskTitle,\r\n            description: values.taskDescription,\r\n            status: values.taskStatus,\r\n            scrumId: Number(scrumId),\r\n            assignedTo: Number(values.taskAssignedTo),\r\n            history: [\r\n                {\r\n                    status: values.taskStatus,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                },\r\n            ],\r\n        });\r\n\r\n        return newScrumResponse.data;\r\n    } catch (error) {\r\n        console.error('Error creating scrum:', error);\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,SAAS,CAAC;IAC1D,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACb;AACJ,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,QAAQ,CAAC;IACzD,OAAOE,QAAQ,CAACE,IAAI,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,UAAU,CAAC;EACjE,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACb;AACJ,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,WAAWY,OAAO,EAAE,CAAC;IACrE,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAMQ,mBAAmB,GAAG,MAAOC,MAAM,IAAK;EACjD,IAAI;IACA,MAAMF,OAAO,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACrC,MAAMC,gBAAgB,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,YAAY,SAAS,EAAE;MAChEoB,EAAE,EAAER,OAAO;MACXS,IAAI,EAAEP,MAAM,CAACQ;IACjB,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,CAACR,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;IAC1C,MAAMlB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,YAAY,QAAQ,EAAE;MACtCoB,EAAE,EAAEG,MAAM;MACVC,KAAK,EAAEV,MAAM,CAACW,SAAS;MACvBC,WAAW,EAAEZ,MAAM,CAACa,eAAe;MACnCC,MAAM,EAAEd,MAAM,CAACe,UAAU;MACzBjB,OAAO,EAAEkB,MAAM,CAAClB,OAAO,CAAC;MACxBmB,UAAU,EAAED,MAAM,CAAChB,MAAM,CAACkB,cAAc,CAAC;MACzCC,OAAO,EAAE,CACL;QACIL,MAAM,EAAEd,MAAM,CAACe,UAAU;QACzBK,IAAI,EAAE,IAAInB,IAAI,CAAC,CAAC,CAACoB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAC/C,CAAC;IAET,CAAC,CAAC;IAEF,OAAOlB,gBAAgB,CAACd,IAAI;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}