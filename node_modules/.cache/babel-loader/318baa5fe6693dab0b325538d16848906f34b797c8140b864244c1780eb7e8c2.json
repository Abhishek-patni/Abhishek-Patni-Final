{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patni\\\\Downloads\\\\Final\\\\React-Agile-Track-System-Solution-main-main\\\\src\\\\components\\\\Scrum Details\\\\ScrumDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrumDetails = _ref => {\n  _s();\n  let {\n    scrum\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    user\n  } = useContext(UserContext);\n  const history = useHistory();\n  useEffect(() => {\n    const checkUser = () => {\n      const loggedInUser = JSON.parse(localStorage.getItem('user'));\n      if (!loggedInUser) {\n        history.push('/login');\n      }\n    };\n    checkUser();\n  }, [history]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n        // Ensure all task IDs are numbers\n        setTasks(response.data.map(task => ({\n          ...task,\n          id: Number(task.id),\n          scrumId: Number(task.scrumId),\n          assignedTo: Number(task.assignedTo)\n        })));\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, [scrum.id]);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/users');\n        // Ensure all user IDs are numbers\n        const scrumUsers = response.data.map(user => ({\n          ...user,\n          id: Number(user.id)\n        })).filter(user => tasks.some(task => task.assignedTo === user.id));\n        setUsers(scrumUsers);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    if (tasks.length > 0) {\n      fetchUsers();\n    }\n  }, [tasks]);\n  const handleStatusChange = async (taskId, newStatus) => {\n    try {\n      // Convert taskId to number to ensure consistent comparison\n      const numericTaskId = Number(taskId);\n      const task = tasks.find(t => t.id === numericTaskId);\n      await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\n        status: newStatus,\n        history: [...task.history, {\n          status: newStatus,\n          date: new Date().toISOString().split('T')[0] // Set the current date\n        }]\n      });\n\n      // Update the tasks state with the new status\n      setTasks(prevTasks => prevTasks.map(task => task.id === numericTaskId ? {\n        ...task,\n        status: newStatus\n      } : task));\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Scrum Details for \", scrum.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [task.title, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), \" \", task.description, \" - \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: task.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 77\n        }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(\"select\", {\n          value: task.status,\n          onChange: e => handleStatusChange(task.id, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"To Do\",\n            children: \"To Do\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"In Progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Done\",\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.name, \" (\", user.email, \")\"]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(ScrumDetails, \"atVDQbtYXDX7d8SGPfAlNU3VQ+U=\", false, function () {\n  return [useHistory];\n});\n_c = ScrumDetails;\nexport default ScrumDetails;\nvar _c;\n$RefreshReg$(_c, \"ScrumDetails\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","UserContext","useHistory","jsxDEV","_jsxDEV","ScrumDetails","_ref","_s","scrum","tasks","setTasks","users","setUsers","user","history","checkUser","loggedInUser","JSON","parse","localStorage","getItem","push","fetchTasks","response","get","id","data","map","task","Number","scrumId","assignedTo","error","console","fetchUsers","scrumUsers","filter","some","length","handleStatusChange","taskId","newStatus","numericTaskId","find","t","patch","status","date","Date","toISOString","split","prevTasks","children","name","fileName","_jsxFileName","lineNumber","columnNumber","title","description","role","value","onChange","e","target","email","_c","$RefreshReg$"],"sources":["C:/Users/Patni/Downloads/Final/React-Agile-Track-System-Solution-main-main/src/components/Scrum Details/ScrumDetails.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { useHistory } from 'react-router-dom';\n\nconst ScrumDetails = ({ scrum }) => {\n    const [tasks, setTasks] = useState([]);\n    const [users, setUsers] = useState([]);\n    const { user } = useContext(UserContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const checkUser = () => {\n            const loggedInUser = JSON.parse(localStorage.getItem('user'));\n            if (!loggedInUser) {\n                history.push('/login');\n            }\n        };\n\n        checkUser();\n    }, [history]);\n\n    useEffect(() => {\n        const fetchTasks = async () => {\n            try {\n                const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n                // Ensure all task IDs are numbers\n                setTasks(response.data.map(task => ({\n                    ...task,\n                    id: Number(task.id),\n                    scrumId: Number(task.scrumId),\n                    assignedTo: Number(task.assignedTo)\n                })));\n            } catch (error) {\n                console.error('Error fetching tasks:', error);\n            }\n        };\n\n        fetchTasks();\n    }, [scrum.id]);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await axios.get('http://localhost:4000/users');\n                // Ensure all user IDs are numbers\n                const scrumUsers = response.data\n                    .map(user => ({ ...user, id: Number(user.id) }))\n                    .filter(user => tasks.some(task => task.assignedTo === user.id));\n                setUsers(scrumUsers);\n            } catch (error) {\n                console.error('Error fetching users:', error);\n            }\n        };\n\n        if (tasks.length > 0) {\n            fetchUsers();\n        }\n    }, [tasks]);\n\n    const handleStatusChange = async (taskId, newStatus) => {\n        try {\n            // Convert taskId to number to ensure consistent comparison\n            const numericTaskId = Number(taskId);\n            const task = tasks.find(t => t.id === numericTaskId);\n            \n            await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\n                status: newStatus,\n                history: [\n                    ...task.history,\n                    {\n                        status: newStatus,\n                        date: new Date().toISOString().split('T')[0], // Set the current date\n                    },\n                ],\n            });\n\n            // Update the tasks state with the new status\n            setTasks(prevTasks =>\n                prevTasks.map(task =>\n                    task.id === numericTaskId ? { ...task, status: newStatus } : task\n                )\n            );\n        } catch (error) {\n            console.error('Error updating task status:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h3>Scrum Details for {scrum.name}</h3>\n            <h4>Tasks</h4>\n            <ul>\n                {tasks.map(task => (\n                    <li key={task.id}>\n                        <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\n                        {user?.role === 'admin' && (\n                            <select\n                                value={task.status}\n                                onChange={(e) => handleStatusChange(task.id, e.target.value)}\n                            >\n                                <option value=\"To Do\">To Do</option>\n                                <option value=\"In Progress\">In Progress</option>\n                                <option value=\"Done\">Done</option>\n                            </select>\n                        )}\n                    </li>\n                ))}\n            </ul>\n            <h4>Users</h4>\n            <ul>\n                {users.map(user => (\n                    <li key={user.id}>\n                        {user.name} ({user.email})\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ScrumDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}