{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patni\\\\Downloads\\\\Final\\\\React-Agile-Track-System-Solution-main-main\\\\src\\\\components\\\\Scrum Details\\\\ScrumDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrumDetails = _ref => {\n  _s();\n  let {\n    scrum\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    user\n  } = useContext(UserContext);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!user) {\n      navigate('/login');\n    }\n  }, [user, navigate]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n        setTasks(response.data.map(task => ({\n          ...task,\n          id: Math.abs(Number(task.id)),\n          // Ensure positive IDs\n          assignedTo: Math.abs(Number(task.assignedTo)) // Ensure positive IDs\n        })));\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        alert('Failed to fetch tasks. Please try again later.');\n      }\n    };\n    fetchTasks();\n  }, [scrum.id]);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/users');\n        setUsers(response.data.map(user => ({\n          ...user,\n          id: Math.abs(Number(user.id)) // Ensure positive IDs\n        })));\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        alert('Failed to fetch users. Please try again later.');\n      }\n    };\n    fetchUsers();\n  }, []);\n  const handleStatusChange = async (taskId, newStatus) => {\n    try {\n      const taskToUpdate = tasks.find(task => task.id === Number(taskId));\n      if (!taskToUpdate) {\n        console.error(`Task with ID ${taskId} not found`);\n        alert(`Task with ID ${taskId} not found.`);\n        return;\n      }\n      const updatedHistory = [...taskToUpdate.history, {\n        status: newStatus,\n        date: new Date().toISOString().split('T')[0]\n      }];\n      await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\n        status: newStatus,\n        history: updatedHistory\n      });\n\n      // Update state with new status and history\n      setTasks(prevTasks => prevTasks.map(task => task.id === Number(taskId) ? {\n        ...task,\n        status: newStatus,\n        history: updatedHistory\n      } : task));\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again later.');\n    }\n  };\n  const assignedUsers = users.filter(user => tasks.some(task => task.assignedTo === user.id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Scrum Details for \", scrum.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [task.title, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), \" \", task.description, \" - \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: task.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 77\n        }, this), (user === null || user === void 0 ? void 0 : user.role) === 'admin' && /*#__PURE__*/_jsxDEV(\"select\", {\n          value: task.status,\n          onChange: e => handleStatusChange(task.id, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"To Do\",\n            children: \"To Do\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"In Progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Done\",\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: assignedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.name, \" (\", user.email, \")\"]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(ScrumDetails, \"DNLvrIQxOVYWCjpqufFEAy4ZM8o=\", false, function () {\n  return [useNavigate];\n});\n_c = ScrumDetails;\nexport default ScrumDetails;\nvar _c;\n$RefreshReg$(_c, \"ScrumDetails\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","UserContext","useNavigate","jsxDEV","_jsxDEV","ScrumDetails","_ref","_s","scrum","tasks","setTasks","users","setUsers","user","navigate","fetchTasks","response","get","id","data","map","task","Math","abs","Number","assignedTo","error","console","alert","fetchUsers","handleStatusChange","taskId","newStatus","taskToUpdate","find","updatedHistory","history","status","date","Date","toISOString","split","patch","prevTasks","assignedUsers","filter","some","children","name","fileName","_jsxFileName","lineNumber","columnNumber","title","description","role","value","onChange","e","target","email","_c","$RefreshReg$"],"sources":["C:/Users/Patni/Downloads/Final/React-Agile-Track-System-Solution-main-main/src/components/Scrum Details/ScrumDetails.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst ScrumDetails = ({ scrum }) => {\n    const [tasks, setTasks] = useState([]);\n    const [users, setUsers] = useState([]);\n    const { user } = useContext(UserContext);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (!user) {\n            navigate('/login');\n        }\n    }, [user, navigate]);\n\n    useEffect(() => {\n        const fetchTasks = async () => {\n            try {\n                const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n                setTasks(response.data.map(task => ({\n                    ...task,\n                    id: Math.abs(Number(task.id)), // Ensure positive IDs\n                    assignedTo: Math.abs(Number(task.assignedTo)), // Ensure positive IDs\n                })));\n            } catch (error) {\n                console.error('Error fetching tasks:', error);\n                alert('Failed to fetch tasks. Please try again later.');\n            }\n        };\n\n        fetchTasks();\n    }, [scrum.id]);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await axios.get('http://localhost:4000/users');\n                setUsers(response.data.map(user => ({\n                    ...user,\n                    id: Math.abs(Number(user.id)), // Ensure positive IDs\n                })));\n            } catch (error) {\n                console.error('Error fetching users:', error);\n                alert('Failed to fetch users. Please try again later.');\n            }\n        };\n\n        fetchUsers();\n    }, []);\n\n    const handleStatusChange = async (taskId, newStatus) => {\n        try {\n            const taskToUpdate = tasks.find(task => task.id === Number(taskId));\n            if (!taskToUpdate) {\n                console.error(`Task with ID ${taskId} not found`);\n                alert(`Task with ID ${taskId} not found.`);\n                return;\n            }\n\n            const updatedHistory = [\n                ...taskToUpdate.history,\n                {\n                    status: newStatus,\n                    date: new Date().toISOString().split('T')[0],\n                },\n            ];\n\n            await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\n                status: newStatus,\n                history: updatedHistory,\n            });\n\n            // Update state with new status and history\n            setTasks(prevTasks =>\n                prevTasks.map(task =>\n                    task.id === Number(taskId)\n                        ? { ...task, status: newStatus, history: updatedHistory }\n                        : task\n                )\n            );\n        } catch (error) {\n            console.error('Error updating task status:', error);\n            alert('Failed to update task status. Please try again later.');\n        }\n    };\n\n    const assignedUsers = users.filter(user => tasks.some(task => task.assignedTo === user.id));\n\n    return (\n        <div>\n            <h3>Scrum Details for {scrum.name}</h3>\n            <h4>Tasks</h4>\n            <ul>\n                {tasks.map(task => (\n                    <li key={task.id}>\n                        <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\n                        {user?.role === 'admin' && (\n                            <select\n                                value={task.status}\n                                onChange={(e) => handleStatusChange(task.id, e.target.value)}\n                            >\n                                <option value=\"To Do\">To Do</option>\n                                <option value=\"In Progress\">In Progress</option>\n                                <option value=\"Done\">Done</option>\n                            </select>\n                        )}\n                    </li>\n                ))}\n            </ul>\n            <h4>Users</h4>\n            <ul>\n                {assignedUsers.map(user => (\n                    <li key={user.id}>\n                        {user.name} ({user.email})\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ScrumDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}